package com.example.monster.airgesture;

import android.media.AudioRecord;
import android.os.AsyncTask;
import android.os.Message;
import android.provider.Settings;
import android.util.Log;
import java.util.*;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Created by Administrator on 2017/6/21.
 */

public class PhaseProxy {


    //Speed adjust
    private static float SPEED_ADJ        = (float)1.5;
    public static PhaseProcessI ppi ;
    private static float  iDistance = 0;
    private static double  fMaxDis = 0;
    private static double  fMinDis = 0;
    private static String sRecordFile ;
    private static BufferedWriter RecordBufferedWriter ;
    //PhaseProcessThread pthread = new PhaseProcessThread();
    ComputeThread stComputeThread = new ComputeThread();
    public Thread thread;
    public static File fRecordTxtFile ;
    public static File fReadRecordTxtFile ;
    public void init(){
        long lTime = 0;
        ppi = new PhaseProcessI();
        float tempf = ppi.doInit(ppi.nativeSignalProcess, GlobalConfig.sFileTemplatePath);
        sRecordFile = GlobalConfig.stWaveFileUtil.getRecordTxtFileName();
        fRecordTxtFile = GlobalConfig.stWaveFileUtil.createFile(sRecordFile);
       // fReadRecordTxtFile = new File(GlobalConfig.stWaveFileUtil.ReadRecordTxtFileName);
        GlobalConfig.bPlayDataReady = true;
        GlobalConfig.stPhaseProxy.start();
    }

    public void destroy(){
    }

    class ComputeThread implements  Runnable {
        ComputeThread() {

        }

        public void run() {
            Log.i("play", "run:");

            doSignalProcess();
            while (true) {
                /*while (GlobalConfig.isRecording == false) {
                }

                while (GlobalConfig.isRecording) {
                    //saveRecordDataToFile();
                    //computeByFileData();
                    computeByRecordData();
                    //compareIos();
                }*/
            }
        }



    }


    public void saveRecordDataToFile() {
        if(GlobalConfig.bRecord  && GlobalConfig.bPlayDataReady) {
            try {
                byte[] recData = GlobalConfig.getInstance().popByteRecData();
                if (recData != null) {
                    long lBeginTime = System.currentTimeMillis();
                    writeByte(recData);
                    writeBytePcm(recData);
                    long lEndTime = System.currentTimeMillis();
                    Log.i("cost", "run begin:" + lBeginTime + "|cost:" + (lEndTime - lBeginTime));
                }

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

            public void computeByRecordData(){
                if(GlobalConfig.bRecord  && GlobalConfig.bPlayDataReady) {
                    try {
                        byte[] recData = GlobalConfig.getInstance().popByteRecData();
                        if (recData != null) {
                            long lBeginTime = System.currentTimeMillis();
                            writeByte(recData);
                            writeBytePcm(recData);
                            short[] shortData = WaveFileUtil.byteArray2ShortArray(recData);
                            //getDistance(shortData);
                            long lEndTime = System.currentTimeMillis();
                            Log.i("cost", "run begin:" + lBeginTime + "|cost:" + (lEndTime - lBeginTime));
                        }

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }


    }




    public void readTxtDataToShort(String sFileName, int iFrameSize) {
        try {
            File filename = new File(sFileName);
            FileInputStream in = new FileInputStream(sFileName);
            InputStreamReader reader = new InputStreamReader(new FileInputStream(filename));
            BufferedReader br = new BufferedReader(reader); // 建立一个对象，它把文件内容转成计算机能读懂的语言
            String line = "";
            long totalAudioLen = in.getChannel().size();
            short[] dData = new short[iFrameSize];
            short iTmp = 0;
            int i = 0;
            int iCount=0;
            String sDataBuf="";
            while ((line = br.readLine()) != null) {

                if(i>=iFrameSize) {
                    i= 0;
                    long lBeginTime = System.currentTimeMillis();
                    //getDistance(dData);
                    long lEndTime = System.currentTimeMillis();
                    Log.e("cost", "GetDistanceChange begin:"+lBeginTime + "|cost:" + (lEndTime - lBeginTime));
                    Log.e("sData", "iCount["+iCount+"],sData:"+sDataBuf );
                    sDataBuf = "";
                }
                String sData = line;
                iTmp = Short.valueOf(sData);
                dData[i] = iTmp;
                sDataBuf += dData[i] + ",";
                iCount++;
                i++;
            }

            System.out.println("readTxtData dataNum is " + String.valueOf(i));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    public void writeByte(byte[] recData){
        if (GlobalConfig.bByte && GlobalConfig.bSaveWavFile) {
            int iReadSize = recData.length;
            Log.i("WaveFileUtil ", "|before writetoFile iReadSize:" + iReadSize);
            if (iReadSize > 0 && recData != null) {

                if (GlobalConfig.recTxtDos == null) {
                    Log.i("record", "resdos is null");
                    if (fRecordTxtFile != null) {
                        try {
                            GlobalConfig.recTxtDos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fRecordTxtFile)));
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        }
                    }
                }

                //循环将buffer中的音频数据写入到OutputStream中
                if (GlobalConfig.recTxtDos != null) {
                    for (int i = 0; i < iReadSize; i=i+2) {
                        try {
                            short iData = (short) ((recData[i] & 0xff) | (recData[i+ 1] & 0xff) << 8);
                            String sData = String.valueOf(iData);
                            GlobalConfig.recTxtDos.writeBytes(sData);
                            GlobalConfig.recTxtDos.writeByte('\n');
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    public void writeBytePcm(byte[] recData){
        if (GlobalConfig.bByte && GlobalConfig.bSaveWavFile) {
            int iReadSize = recData.length;
            Log.i("WaveFileUtil ", "|before writetoFile iReadSize:" + iReadSize);
            if (iReadSize > 0 && recData != null) {

                if (GlobalConfig.recDos2 == null) {
                    Log.i("record", "resdos is null");
                    if (GlobalConfig.fPcmRecordFile2 != null) {
                        try {
                            GlobalConfig.recDos2 = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(GlobalConfig.fPcmRecordFile2)));
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        }
                    }
                }

                //循环将buffer中的音频数据写入到OutputStream中
                if (GlobalConfig.recDos2 != null) {
                    for (int i = 0; i < iReadSize; i++) {
                        try {
                            GlobalConfig.recDos2.writeByte(recData[i]);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    public void start(){
        if(GlobalConfig.bDataProcessThreadFlag) {
            thread = new Thread(stComputeThread);
            thread.start();
        }

    }

    public void doSignalProcess()
    {
        String sFileName = GlobalConfig.stWaveFileUtil.shendaTxtFileName;

        Map<String, Integer> mapStr  = new HashMap<String, Integer>();
        /*mapStr.put("2017-07-08_19h-02m-28s._Watch4.txt", 46570);
        mapStr.put("2017-07-08_19h-02m-30s._Watch5.txt", 50154);
        mapStr.put("2017-07-08_19h-02m-33s._Watch6.txt", 51946);
        mapStr.put("2017-07-08_15h-08m-33s._Watch19.txt", 66282);
        mapStr.put("2017-07-08_15h-08m-36s._Watch20.txt", 71658);
        mapStr.put("2017-07-08_15h-08m-43s._Watch22.txt", 53738);
        mapStr.put("2017-07-08_19h-07m-04s._Watch4.txt", 46570);
        mapStr.put("2017-07-08_19h-07m-09s._Watch6.txt", 46570);
        mapStr.put("2017-07-08_19h-07m-11s._Watch7.txt", 53738);
        mapStr.put("2017-07-09_16h-45m-29s._Watch17.txt", 68074);
        mapStr.put("2017-07-09_16h-45m-37s._Watch20.txt", 60906);
        mapStr.put("2017-07-09_16h-45m-42s._Watch22.txt", 77034);
        mapStr.put("2017-07-08_19h-13m-47s._Watch18.txt", 62698);
        mapStr.put("2017-07-08_19h-14m-26s._Watch31.txt", 96746);
        mapStr.put("2017-07-08_19h-14m-34s._Watch34.txt", 85994);
        mapStr.put("2017-07-08_19h-15m-38s._Watch8.txt", 62698);
        mapStr.put("2017-07-08_19h-15m-54s._Watch14.txt", 60906);
        mapStr.put("2017-07-08_19h-16m-10s._Watch20.txt", 78826);*/
        mapStr.put("rec2017-07-09_19h04m37.846s_matlab.txt", 350208);


        Iterator<Map.Entry<String, Integer> > it = mapStr.entrySet().iterator();
        while (it.hasNext())
        {
            int  totalAudioLen = 0;       //8192*4;//69866;//in.getChannel().size();
            Map.Entry<String, Integer> entry = it.next();
            String str = entry.getKey();
            totalAudioLen  = entry.getValue();
            sFileName =  GlobalConfig.sFileTemplatePath + str;
            try {
                File filename = new File(sFileName);
                FileInputStream in = new FileInputStream(sFileName);
                InputStreamReader reader = new InputStreamReader(new FileInputStream(filename));
                BufferedReader br = new BufferedReader(reader); // 建立一个对象，它把文件内容转成计算机能读懂的语言
                String line = "";
                short iTmp = 0;
                int i = 0;
                int iCount=0;
                String sDataBuf="";
                float[] recordData  = new float[(int)totalAudioLen];
                while ((line = br.readLine()) != null) {
                    String sData = line;
                    recordData[i]  = Float.valueOf(sData);
                    i++;
                    iCount++;
                    if(i==totalAudioLen)
                    {
                        break;
                    }
                }

                long lBeginTime = System.currentTimeMillis();
                Log.e("Jni", ppi.getJniString());
                int SignalProcess_Size = 2048;
                //float logpxx = ppi.doActionRecognition(ppi.nativeSignalProcess, recordData, recordData.length);
                int iIndex = 0;
                while(true) {

                    if (recordData.length >= SignalProcess_Size && ((iIndex+SignalProcess_Size)<=recordData.length))
                    {
                        float[] fData = new float[SignalProcess_Size];
                        System.arraycopy(recordData, iIndex, fData, 0, SignalProcess_Size);
                        iIndex += SignalProcess_Size;
                        int iLen = 20;
				        float[] costArr = new float[iLen];

                        costArr = ppi. doActionRecognitionV2(ppi.nativeSignalProcess, fData, fData.length, GlobalConfig.sFileResultPath, str);
                        long lCostTime = System.currentTimeMillis() -lBeginTime;
                        Log.i("doActionRecognition", "cost:" + lCostTime + "|type:" + costArr[0]);

                        //vecSrc.erase(vecSrc.begin(), vecSrc.begin() + SignalProcess_Size);
                    }
                }

              } catch (Exception e) {
                e.printStackTrace();
            }
         }
    }


}
